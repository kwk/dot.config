#!/bin/expect
# This script logs into ssh host or an ilo device that has ssh
# enabled and runs a command. Uses "TCL" syntax and language in
# expect script.
#
# Author    : Shane Bradley
# Contact   : sbradley@redhat.com
#
# Usage:
#   fencing-simple_ssh_login.exp <hostname> <username> <port> <path to key file | password>
#
# pyexpect is independent project that is pure python and does not use
# "expect". They are different implementations that try to acheive the same
# goal. The pexpect attempts to use similar syntax as expect which is why they
# look similar when coding.
#
# Useful Articles:
# https://pexpect.readthedocs.io/en/stable
# https://www.journaldev.com/1405/expect-script-ssh-example-tutorial
# https://www.pantz.org/software/expect/expect_examples_and_tips.html
#
# The other issue was passing "cipher" as a option. For now, it is hard coded.


# Turn on debugging. Set to 1 to enable debugging.
exp_internal 0

# Time to wait for all the input to be recieved. In fencing scripts this would
# be the "login_timeout". The timeout starts as soon as you enter the expect
# {}. If the output is not matched by the time it hits timeout, then Timeout
# Error is thrown.
#
# If a timeout occurs, then the last thing that was received will be written
# before the Timeout Error occurs. This is demostrated with debugging enabled.
set timeout 10

# Set some vars from commandline options passed to script.
set hostname [lindex $argv 0]
set username [lindex $argv 1]
set ssh_port [lindex $argv 2]
set ssh_cipher "aes256-cbc"

# The prompts to look for with expect. The prompt can be tricky to get correct
# if you do in color coding in bash with PS1 var. Enable debugging if the prompt
# is never matched.
set prompt "$username@*~*"
set ilo_prompt "</>hpiLO->"

# Make these use same index for now and to one of the commandline options.
set ssh_key_file [lindex $argv 3]
set password [lindex $argv 3]

# If $argv3 is a path to existing file then assume it is for a key file.
if {[file exists $ssh_key_file] == 1} {
    # send_user - Output that gets sent to stdout. This is used for sending message
    # to the screen as the script runs. It is great for user feedback, banners, and
    # for generating error messages. If not successful then we never print message.
    send_user "INFO: Attempting to login to $hostname with an ssh key.\n"
    # Make an ssh connection using a ssh key.
    spawn  /usr/bin/ssh $username@$hostname -p $ssh_port -c $ssh_cipher -i $ssh_key_file
} else {
    send_user "INFO: Attempting to login to $hostname with a password.\n"
    # Make an ssh connection using a password.
    spawn  /usr/bin/ssh $username@$hostname -p $ssh_port -c $ssh_cipher
}


# If we are prompted for password then enter password. If we get a prompt then
# just hit enter to get another prompt to account for having enter password if
# prompted.
expect {
    # The first match is the one that will be used. We want to have a request to
    # enter password to be hit before searching for prompt.
    timeout { send_user "\nTimeout Error: Failed to find prompt for $hostname.\n"; exit 1 }
    eof { send_user "\nEOF Error: There was a SSH failure for $hostname.\n"; exit 1 }
    "*assword:" {send "$password\n"}
    $ilo_prompt {send "\n"}
    $prompt {send "\n"}
}
send_user "\nINFO: Successfully logged into $hostname.\n"
# Check to see if we got a prompt and if so run a command.
expect {
    timeout { send_user "\nTimeout Error: Failed to find prompt for $hostname.\n"; exit 1 }
    eof { send_user "\nEOF Error: There was a SSH failure for $hostname.\n"; exit 1 }
    $ilo_prompt {send "show /system1/oemhp_power1 oemhp_powerreg\n"}
    $prompt {send "logger \"The expect script has logged in with ssh.\"\n"}
}
# Exit
expect {
    timeout { send_user "\nTimeout Error: Failed to find prompt for $hostname.\n"; exit 1 }
    eof { send_user "\nEOF Error: There was a SSH failure for $hostname.\n"; exit 1 }
    $ilo_prompt {send "exit\r"}
    $prompt {send "exit\n"}
}
