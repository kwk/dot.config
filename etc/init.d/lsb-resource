#!/bin/bash
# lsb-resource:        Simple LSB script resource.
#
# chkconfig: 345 97 03
# description: A lsb script that starts a process running in the background.
# processname:
# pidfile: /var/run/lsb-resource.pid

### BEGIN INIT INFO
# Required-Start: $local_fs $network $remote_fs $named $time
# Required-Stop: $local_fs $network $remote_fs $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

# ###############################################################################
# This script simply starts a process running in the background. The process can
# be httpd process or sleep process.

# START:  Creates the lock file and starts a process running in the background.
# STOP:   Removes the lock file and kills the process running in the background.
# STATUS: Checks if the lock file exists
# ###############################################################################

# ###############################################################################
# Files
# ###############################################################################
# https://github.com/sbradley7777/dot.config/blob/master/etc/sysconfig/lsb-resource
# https://github.com/sbradley7777/dot.config/blob/master/etc/systemd/system/lsb-resource.service
# https://github.com/ssato/misc/blob/master/init_script_example.sh

# ###############################################################################
# systemd
# ###############################################################################
# * Will cause errors to occur if this function is source in when systemd attempts
#   to start this script.
#     . /etc/init.d/functions
# * The pids created by systemd starting are located in the following file:
#      /sys/fs/cgroup/systemd/system.slice/lsb-resource.service/tasks
# * A SIGTERM signal has to be used for killing the process running in
#   background. If SIGKILL (-9) is used then systemd will interrupt that as a
#   failed stop.

# ###############################################################################
# pacemaker
# ###############################################################################
# To add to pacemaker as lsb resource:
#    pcs resource create lsb-res lsb:lsb-resource op monitor interval=20s

# To add as systemd service, then will require that systemd service file is added.
#    cp lsb-resource.service /etc/systemd/system/lsb-resource.service
#    systemctl daemon-reload
#    pcs resource create systemd-res systemd:lsb-resource op monitor interval=20s

# ###############################################################################
# TODO
# ###############################################################################
# * Instead of using "exit", store the return code and that will be returned.
#   Then in case statement capture return code and then script will return
#   that. Review the init_script_example.sh on how they doing or other scripts.
# * The stop() and start() should return the result of status() which should
#   help not using command "exit".

# Source in sysconfig if tha file exists
[ -f /etc/sysconfig/${0##*/} ] && . /etc/sysconfig/${0##*/}

# ###############################################################################
# Vars
# ###############################################################################

# The path to the lockfile.
LOCKFILE=/var/run/${0##*/}.pid;

# If greater than zero then delay startup by X seconds. You set the delay that
# is needed by changing this variable.
[ -z "$DELAY_START_SECONDS" ] && DELAY_START_SECONDS=0;
# The amount of time to stall the stopping of the script.
[ -z "$DELAY_STOP_SECONDS" ] && DELAY_STOP_SECONDS=0;

# If $ENABLE_HTTPD and $PATH_TO_SCRIPT is enabled then $PATH_TO_SCRIPT will be
# ignored.
# If equal to zero then start webserver.
[ -z "$ENABLE_HTTPD" ] && ENABLE_HTTPD=1;
# If variable not empty then run the external script.
[ -z "$PATH_TO_SCRIPT" ] && PATH_TO_SCRIPT=;

# ###############################################################################
# The clug utility uses the normal logging levels as defined in
# sys/syslog.h.
# ###############################################################################
LOG_EMERG=0; # system is unusable
LOG_ALERT=1; # action must be taken immediately
LOG_CRIT=2; # critical conditions
LOG_ERR=3; # error conditions
LOG_WARNING=4; # warning conditions
LOG_NOTICE=5; # normal but significant condition
LOG_INFO=6; # informational
LOG_DEBUG=7; # debug-level messages

clulog(){
    logger_name=${0##*/};
    logger_level="local7.info";
    case "$1" in
	$LOG_INFO)  logger_level="local7.info"; ;;
	$LOG_WARNING)  logger_level="local7.warning"; ;;
	*)  logger_level="local7.info"; ;;
    esac
    logger -i -t "$logger_name" -p "$logger_level" "$2";
}

stop() {
    # Assumes only running if lockfile exists.
    clulog $LOG_INFO "Executing stop.";
    if [ ! -f $LOCKFILE ]; then
        clulog $LOG_WARNING "The script is not running.";
        return 0;
    fi
    # If the process is still running then kill that process.
    pid=`cat $LOCKFILE`;
    kill $pid &> /dev/null;
    # If there was no error on killing the process then remove the file.
    if [ $? ]; then
	status;
	if [ $? -eq 1 ]; then
	    clulog $LOG_INFO "Removing the lockfile: $LOCKFILE";
	    rm -f $LOCKFILE;
	    res=$?
	    sleep $DELAY_STOP_SECONDS;
	    return $res;
	else
	    clulog $LOG_ERR "The process is still running and did not die."
	    return 1
	fi
    else
	return 1;
    fi
}

start() {
    clulog $LOG_INFO "Executing start.";
    # Start a process that runs in the background. When using systemd a running
    # process is required in order to be considered successful.  This process
    # will create a running process in the background by doing a sleep command
    # or starting a python httpd process.

    # The startup will sleep for X seconds to simulate a delayed start up if
    # greater than zero.
    if [ "$DELAY_START_SECONDS" -gt 0 ]; then
        clulog $LOG_INFO "Delaying startup by $DELAY_START_SECONDS seconds for the script: $0.";
        sleep $DELAY_START_SECONDS;
    fi
    # Start background process
    if [ $ENABLE_HTTPD -eq 0 ]; then
	httpd_port=8088;
	clulog $LOG_INFO "Starting httpd process on port $httpd_port in the background.";
	cd /var/www/html/
	python -m SimpleHTTPServer $httpd_port &> /dev/null &
	echo $! > $LOCKFILE;
    elif [ ! -z $PATH_TO_SCRIPT ]; then
	if [ ! -f $PATH_TO_SCRIPT ]; then
	    clulog $LOG_ERR "The script does not exist: $PATH_TO_SCRIPT.";
	    return 1;
	fi
	clulog $LOG_INFO "Starting script in the background: $PATH_TO_SCRIPT.";
	$PATH_TO_SCRIPT &> /dev/null &
	echo $! > $LOCKFILE;
    else
	clulog $LOG_INFO "Starting sleep infinity process in the background.";
	/bin/bash -c "sleep infinity" &
	echo $! > $LOCKFILE;
    fi
    status;
    return $?
}

status() {
    clulog $LOG_INFO "Executing status.";
    if [ -f $LOCKFILE ]; then
	clulog $LOG_INFO "The script is running.";
	pgrep -F $LOCKFILE &> /dev/null;
	if [ ! $? -eq 0 ]; then
	   return 1;
	fi
    else
	clulog $LOG_INFO "The script is not running.";
	return 1;
    fi
    return 0;
}

monitor() {
    clulog $LOG_INFO "Executing monitor.";
    status;
    return $?;
}

reload() {
    clulog $LOG_INFO "Executing reload.";
    return 0;
}

restart() {
    clulog $LOG_INFO "Executing restart.";
    $0 stop;
    if [ $? -eq 0 ]; then
	start;
	status;
	return $?;
    else
	return 1;
    fi
}

# ###############################################################################
# Main
# ###############################################################################
rc=1;
case "$1" in
  start)   start;   rc=$?; ;;
  stop)    stop;    rc=$?; ;;
  status)  status;  rc=$?; ;;
  monitor) monitor; rc=$?; ;;
  restart) restart; rc=$?; ;;
  reload)  reload;  rc=$?; ;;
  *) rc=3; ;;
esac
exit $rc;
